package com.natrix.whatappclone.message;import com.natrix.whatappclone.chat.Chat;import com.natrix.whatappclone.chat.ChatRepository;import com.natrix.whatappclone.file.FileService;import com.natrix.whatappclone.file.FileUtils;import com.natrix.whatappclone.notification.Notification;import com.natrix.whatappclone.notification.NotificationService;import com.natrix.whatappclone.notification.NotificationType;import com.natrix.whatappclone.utility.Builder;import jakarta.persistence.EntityNotFoundException;import lombok.RequiredArgsConstructor;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import java.util.List;@Service@RequiredArgsConstructorpublic class MessageService {    private final MessageRepository messageRepository;    private final ChatRepository chatRepository;    private final MessageMapper messageMapper;    private final FileService fileService;    private final NotificationService notificationService;    public void saveMessage(MessageRequest messageRequest){        Chat chat  = this.chatRepository.findById(messageRequest.getChatId())                             .orElseThrow(()-> new EntityNotFoundException("Chat with id" + messageRequest.getChatId() + " not found!"));        Message message = Builder.of(Message::new)                                  .add(Message::setContent, messageRequest.getContent())                                  .add(Message::setSenderId, messageRequest.getSenderId())                                  .add(Message::setReceiverId, messageRequest.getReceiverId())                                  .add(Message::setMessageType, messageRequest.getMessageType())                                  .add(Message::setChat, chat)                                  .add(Message::setMessageState, MessageState.SENT)                                  .build();        this.messageRepository.save(message);        Notification notification = Builder.of(Notification::new)                                            .add(Notification::setChatId, chat.getId())                                            .add(Notification::setMessageType, messageRequest.getMessageType())                                            .add(Notification::setContent, messageRequest.getContent())                                            .add(Notification::setSenderId, messageRequest.getSenderId())                                            .add(Notification::setReceiverId, messageRequest.getReceiverId())                                            .add(Notification::setNotificationType, NotificationType.MESSAGE)                                            .add(Notification::setChatName, chat.getChatName(message.getSenderId()))                                            .build();        this.notificationService.sendNotification(message.getReceiverId(), notification);    }    public List<MessageResponse> findChatMessages(String chatId){        return this.messageRepository.findMessagesByChatId(chatId)                       .stream()                       .map(messageMapper::toMessageResponse)                       .toList();    }    @Transactional    public void setMessagesToSeen(String chatId, Authentication authentication){        Chat chat = this.chatRepository.findById(chatId)                            .orElseThrow(()-> new EntityNotFoundException("Chat with id " + chatId + " not found!"));        final String recipientId = getRecipientId(chat, authentication);        this.messageRepository.setMessagesToSeenByChatId(chatId, MessageState.SEEN);        Notification notification = Builder.of(Notification::new)                                            .add(Notification::setChatId, chat.getId())                                            .add(Notification::setReceiverId, recipientId)                                            .add(Notification::setSenderId, getSenderId(chat, authentication))                                            .build();        this.notificationService.sendNotification(recipientId, notification);    }    public  void uploadMediaMessage(String chatId, MultipartFile file, Authentication authentication){        Chat chat = this.chatRepository.findById(chatId)                            .orElseThrow(()-> new EntityNotFoundException("Chat with id " + chatId + " not found!"));        final String senderId = getSenderId(chat, authentication);        final String recipientId = getRecipientId(chat, authentication);        final  String filePath = this.fileService.saveFile(file, senderId);        Message message = Builder.of(Message::new)                                  .add(Message::setSenderId, senderId)                                  .add(Message::setReceiverId, recipientId)                                  .add(Message::setMessageType, MessageType.IMAGE)                                  .add(Message::setChat, chat)                                  .add(Message::setMessageState, MessageState.SENT)                                  .add(Message::setMediaFilePath, filePath)                                  .build();        this.messageRepository.save(message);        Notification notification = Builder.of(Notification::new)                                            .add(Notification::setChatId, chat.getId())                                            .add(Notification::setNotificationType, NotificationType.IMAGE)                                            .add(Notification::setMessageType, MessageType.IMAGE)                                            .add(Notification::setSenderId, senderId)                                            .add(Notification::setReceiverId, recipientId)                                            .add(Notification::setMedia, FileUtils.readFileFromLocation(filePath))                                            .build();        this.notificationService.sendNotification(recipientId, notification);    }    private String getSenderId(Chat chat, Authentication authentication) {        if (chat.getSender().getId().equals(authentication.getName())){            return chat.getSender().getId();        }        return chat.getRecipient().getId();    }    private String getRecipientId(Chat chat, Authentication authentication) {        if (chat.getSender().getId().equals(authentication.getName())){            return chat.getRecipient().getId();        }        return chat.getSender().getId();    }}