package com.natrix.whatappclone.chat;import com.natrix.whatappclone.user.User;import com.natrix.whatappclone.user.UserRepository;import com.natrix.whatappclone.utility.Builder;import jakarta.persistence.EntityNotFoundException;import lombok.RequiredArgsConstructor;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Optional;@Service@RequiredArgsConstructorpublic class ChatService {    private final ChatRepository chatRepository;    private final UserRepository userRepository;    private final ChatMapper chatMapper;    @Transactional(readOnly = true)    public List<ChatResponse> getChatsByReceiverId(Authentication currentUser){        final String userId = currentUser.getName();        return this.chatRepository.findChatsBySenderId(userId)                       .stream()                       .map(c ->  chatMapper.toChatResponse(c, userId))                       .toList();    }    public String createChat(String senderId, String receiverId){        Optional<Chat> existingChat = this.chatRepository.findChatBySenderAndReceiver(senderId, receiverId);        if (existingChat.isPresent()){            return existingChat.get().getId();        }        User sender = this.userRepository.findByPublicId(senderId)                                        .orElseThrow(()-> new EntityNotFoundException("Sender with id "+ senderId + " not found!"));        User receiver = this.userRepository.findByPublicId(receiverId)                              .orElseThrow(()-> new EntityNotFoundException("Receiver with id "+ receiverId + " not found!"));        Chat chat = Builder.of(Chat::new)                            .add(Chat::setSender, sender)                            .add(Chat::setRecipient, receiver)                            .build();        Chat savedChat = this.chatRepository.save(chat);        return savedChat.getId();    }}